// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FileFooterOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Root file structure
pub struct FileFooter<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FileFooter<'a> {
  type Inner = FileFooter<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FileFooter<'a> {
  pub const VT_FORMAT_VERSION: flatbuffers::VOffsetT = 4;
  pub const VT_VECTOR_SPACES: flatbuffers::VOffsetT = 6;
  pub const VT_BLOCK_MANIFEST: flatbuffers::VOffsetT = 8;
  pub const VT_METADATA_COLUMNS: flatbuffers::VOffsetT = 10;
  pub const VT_STRING_HEAP_BLOCK_INDEX: flatbuffers::VOffsetT = 12;
  pub const VT_EXTENSIONS: flatbuffers::VOffsetT = 14;
  pub const VT_COMPATIBILITY_VERSION: flatbuffers::VOffsetT = 16;
  pub const VT_DEPRECATED_FIELDS: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FileFooter { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FileFooterArgs<'args>
  ) -> flatbuffers::WIPOffset<FileFooter<'bldr>> {
    let mut builder = FileFooterBuilder::new(_fbb);
    if let Some(x) = args.deprecated_fields { builder.add_deprecated_fields(x); }
    if let Some(x) = args.extensions { builder.add_extensions(x); }
    builder.add_string_heap_block_index(args.string_heap_block_index);
    if let Some(x) = args.metadata_columns { builder.add_metadata_columns(x); }
    if let Some(x) = args.block_manifest { builder.add_block_manifest(x); }
    if let Some(x) = args.vector_spaces { builder.add_vector_spaces(x); }
    builder.add_compatibility_version(args.compatibility_version);
    builder.add_format_version(args.format_version);
    builder.finish()
  }


  #[inline]
  pub fn format_version(&self) -> u16 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u16>(FileFooter::VT_FORMAT_VERSION, Some(3)).unwrap()}
  }
  #[inline]
  pub fn vector_spaces(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<VectorSpace<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<VectorSpace>>>>(FileFooter::VT_VECTOR_SPACES, None).unwrap()}
  }
  #[inline]
  pub fn block_manifest(&self) -> flatbuffers::Vector<'a, DataBlock> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, DataBlock>>>(FileFooter::VT_BLOCK_MANIFEST, None).unwrap()}
  }
  #[inline]
  pub fn metadata_columns(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MetadataColumn<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MetadataColumn>>>>(FileFooter::VT_METADATA_COLUMNS, None)}
  }
  #[inline]
  pub fn string_heap_block_index(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(FileFooter::VT_STRING_HEAP_BLOCK_INDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn extensions(&self) -> Option<Extensions<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<Extensions>>(FileFooter::VT_EXTENSIONS, None)}
  }
  #[inline]
  pub fn compatibility_version(&self) -> u16 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u16>(FileFooter::VT_COMPATIBILITY_VERSION, Some(3)).unwrap()}
  }
  #[inline]
  pub fn deprecated_fields(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(FileFooter::VT_DEPRECATED_FIELDS, None)}
  }
}

impl flatbuffers::Verifiable for FileFooter<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u16>("format_version", Self::VT_FORMAT_VERSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<VectorSpace>>>>("vector_spaces", Self::VT_VECTOR_SPACES, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, DataBlock>>>("block_manifest", Self::VT_BLOCK_MANIFEST, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<MetadataColumn>>>>("metadata_columns", Self::VT_METADATA_COLUMNS, false)?
     .visit_field::<u32>("string_heap_block_index", Self::VT_STRING_HEAP_BLOCK_INDEX, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<Extensions>>("extensions", Self::VT_EXTENSIONS, false)?
     .visit_field::<u16>("compatibility_version", Self::VT_COMPATIBILITY_VERSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("deprecated_fields", Self::VT_DEPRECATED_FIELDS, false)?
     .finish();
    Ok(())
  }
}
pub struct FileFooterArgs<'a> {
    pub format_version: u16,
    pub vector_spaces: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<VectorSpace<'a>>>>>,
    pub block_manifest: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, DataBlock>>>,
    pub metadata_columns: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MetadataColumn<'a>>>>>,
    pub string_heap_block_index: u32,
    pub extensions: Option<flatbuffers::WIPOffset<Extensions<'a>>>,
    pub compatibility_version: u16,
    pub deprecated_fields: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for FileFooterArgs<'a> {
  #[inline]
  fn default() -> Self {
    FileFooterArgs {
      format_version: 3,
      vector_spaces: None, // required field
      block_manifest: None, // required field
      metadata_columns: None,
      string_heap_block_index: 0,
      extensions: None,
      compatibility_version: 3,
      deprecated_fields: None,
    }
  }
}

pub struct FileFooterBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FileFooterBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_format_version(&mut self, format_version: u16) {
    self.fbb_.push_slot::<u16>(FileFooter::VT_FORMAT_VERSION, format_version, 3);
  }
  #[inline]
  pub fn add_vector_spaces(&mut self, vector_spaces: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<VectorSpace<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FileFooter::VT_VECTOR_SPACES, vector_spaces);
  }
  #[inline]
  pub fn add_block_manifest(&mut self, block_manifest: flatbuffers::WIPOffset<flatbuffers::Vector<'b , DataBlock>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FileFooter::VT_BLOCK_MANIFEST, block_manifest);
  }
  #[inline]
  pub fn add_metadata_columns(&mut self, metadata_columns: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<MetadataColumn<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FileFooter::VT_METADATA_COLUMNS, metadata_columns);
  }
  #[inline]
  pub fn add_string_heap_block_index(&mut self, string_heap_block_index: u32) {
    self.fbb_.push_slot::<u32>(FileFooter::VT_STRING_HEAP_BLOCK_INDEX, string_heap_block_index, 0);
  }
  #[inline]
  pub fn add_extensions(&mut self, extensions: flatbuffers::WIPOffset<Extensions<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Extensions>>(FileFooter::VT_EXTENSIONS, extensions);
  }
  #[inline]
  pub fn add_compatibility_version(&mut self, compatibility_version: u16) {
    self.fbb_.push_slot::<u16>(FileFooter::VT_COMPATIBILITY_VERSION, compatibility_version, 3);
  }
  #[inline]
  pub fn add_deprecated_fields(&mut self, deprecated_fields: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FileFooter::VT_DEPRECATED_FIELDS, deprecated_fields);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FileFooterBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FileFooterBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FileFooter<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, FileFooter::VT_VECTOR_SPACES,"vector_spaces");
    self.fbb_.required(o, FileFooter::VT_BLOCK_MANIFEST,"block_manifest");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FileFooter<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FileFooter");
      ds.field("format_version", &self.format_version());
      ds.field("vector_spaces", &self.vector_spaces());
      ds.field("block_manifest", &self.block_manifest());
      ds.field("metadata_columns", &self.metadata_columns());
      ds.field("string_heap_block_index", &self.string_heap_block_index());
      ds.field("extensions", &self.extensions());
      ds.field("compatibility_version", &self.compatibility_version());
      ds.field("deprecated_fields", &self.deprecated_fields());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `FileFooter`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_file_footer_unchecked`.
pub fn root_as_file_footer(buf: &[u8]) -> Result<FileFooter, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<FileFooter>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `FileFooter` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_file_footer_unchecked`.
pub fn size_prefixed_root_as_file_footer(buf: &[u8]) -> Result<FileFooter, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<FileFooter>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `FileFooter` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_file_footer_unchecked`.
pub fn root_as_file_footer_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<FileFooter<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<FileFooter<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `FileFooter` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_file_footer_unchecked`.
pub fn size_prefixed_root_as_file_footer_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<FileFooter<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<FileFooter<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a FileFooter and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `FileFooter`.
pub unsafe fn root_as_file_footer_unchecked(buf: &[u8]) -> FileFooter {
  flatbuffers::root_unchecked::<FileFooter>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed FileFooter and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `FileFooter`.
pub unsafe fn size_prefixed_root_as_file_footer_unchecked(buf: &[u8]) -> FileFooter {
  flatbuffers::size_prefixed_root_unchecked::<FileFooter>(buf)
}
pub const FILE_FOOTER_IDENTIFIER: &str = "MVF3";

#[inline]
pub fn file_footer_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, FILE_FOOTER_IDENTIFIER, false)
}

#[inline]
pub fn file_footer_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, FILE_FOOTER_IDENTIFIER, true)
}

#[inline]
pub fn finish_file_footer_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<FileFooter<'a>>) {
  fbb.finish(root, Some(FILE_FOOTER_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_file_footer_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<FileFooter<'a>>) {
  fbb.finish_size_prefixed(root, Some(FILE_FOOTER_IDENTIFIER));
}
