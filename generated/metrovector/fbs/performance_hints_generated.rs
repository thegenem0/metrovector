// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum PerformanceHintsOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Performance optimization hints
pub struct PerformanceHints<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PerformanceHints<'a> {
  type Inner = PerformanceHints<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PerformanceHints<'a> {
  pub const VT_MEMORY_LAYOUT: flatbuffers::VOffsetT = 4;
  pub const VT_PREFETCH_STRATEGY: flatbuffers::VOffsetT = 6;
  pub const VT_CACHE_HINTS: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PerformanceHints { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PerformanceHintsArgs<'args>
  ) -> flatbuffers::WIPOffset<PerformanceHints<'bldr>> {
    let mut builder = PerformanceHintsBuilder::new(_fbb);
    if let Some(x) = args.cache_hints { builder.add_cache_hints(x); }
    if let Some(x) = args.prefetch_strategy { builder.add_prefetch_strategy(x); }
    if let Some(x) = args.memory_layout { builder.add_memory_layout(x); }
    builder.finish()
  }


  #[inline]
  pub fn memory_layout(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PerformanceHints::VT_MEMORY_LAYOUT, None)}
  }
  #[inline]
  pub fn prefetch_strategy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PerformanceHints::VT_PREFETCH_STRATEGY, None)}
  }
  #[inline]
  pub fn cache_hints(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(PerformanceHints::VT_CACHE_HINTS, None)}
  }
}

impl flatbuffers::Verifiable for PerformanceHints<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("memory_layout", Self::VT_MEMORY_LAYOUT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("prefetch_strategy", Self::VT_PREFETCH_STRATEGY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("cache_hints", Self::VT_CACHE_HINTS, false)?
     .finish();
    Ok(())
  }
}
pub struct PerformanceHintsArgs<'a> {
    pub memory_layout: Option<flatbuffers::WIPOffset<&'a str>>,
    pub prefetch_strategy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub cache_hints: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}
impl<'a> Default for PerformanceHintsArgs<'a> {
  #[inline]
  fn default() -> Self {
    PerformanceHintsArgs {
      memory_layout: None,
      prefetch_strategy: None,
      cache_hints: None,
    }
  }
}

pub struct PerformanceHintsBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PerformanceHintsBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_memory_layout(&mut self, memory_layout: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PerformanceHints::VT_MEMORY_LAYOUT, memory_layout);
  }
  #[inline]
  pub fn add_prefetch_strategy(&mut self, prefetch_strategy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PerformanceHints::VT_PREFETCH_STRATEGY, prefetch_strategy);
  }
  #[inline]
  pub fn add_cache_hints(&mut self, cache_hints: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PerformanceHints::VT_CACHE_HINTS, cache_hints);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PerformanceHintsBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PerformanceHintsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PerformanceHints<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PerformanceHints<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PerformanceHints");
      ds.field("memory_layout", &self.memory_layout());
      ds.field("prefetch_strategy", &self.prefetch_strategy());
      ds.field("cache_hints", &self.cache_hints());
      ds.finish()
  }
}
