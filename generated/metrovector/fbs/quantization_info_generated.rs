// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum QuantizationInfoOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Advanced quantization
pub struct QuantizationInfo<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for QuantizationInfo<'a> {
  type Inner = QuantizationInfo<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> QuantizationInfo<'a> {
  pub const VT_METHOD: flatbuffers::VOffsetT = 4;
  pub const VT_PARAMETERS: flatbuffers::VOffsetT = 6;
  pub const VT_CODEBOOKS_BLOCK_INDEX: flatbuffers::VOffsetT = 8;
  pub const VT_CODES_BLOCK_INDEX: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    QuantizationInfo { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args QuantizationInfoArgs<'args>
  ) -> flatbuffers::WIPOffset<QuantizationInfo<'bldr>> {
    let mut builder = QuantizationInfoBuilder::new(_fbb);
    builder.add_codes_block_index(args.codes_block_index);
    builder.add_codebooks_block_index(args.codebooks_block_index);
    if let Some(x) = args.parameters { builder.add_parameters(x); }
    if let Some(x) = args.method { builder.add_method(x); }
    builder.finish()
  }


  #[inline]
  pub fn method(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(QuantizationInfo::VT_METHOD, None).unwrap()}
  }
  #[inline]
  pub fn parameters(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(QuantizationInfo::VT_PARAMETERS, None)}
  }
  #[inline]
  pub fn codebooks_block_index(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(QuantizationInfo::VT_CODEBOOKS_BLOCK_INDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn codes_block_index(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(QuantizationInfo::VT_CODES_BLOCK_INDEX, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for QuantizationInfo<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("method", Self::VT_METHOD, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("parameters", Self::VT_PARAMETERS, false)?
     .visit_field::<u32>("codebooks_block_index", Self::VT_CODEBOOKS_BLOCK_INDEX, false)?
     .visit_field::<u32>("codes_block_index", Self::VT_CODES_BLOCK_INDEX, false)?
     .finish();
    Ok(())
  }
}
pub struct QuantizationInfoArgs<'a> {
    pub method: Option<flatbuffers::WIPOffset<&'a str>>,
    pub parameters: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub codebooks_block_index: u32,
    pub codes_block_index: u32,
}
impl<'a> Default for QuantizationInfoArgs<'a> {
  #[inline]
  fn default() -> Self {
    QuantizationInfoArgs {
      method: None, // required field
      parameters: None,
      codebooks_block_index: 0,
      codes_block_index: 0,
    }
  }
}

pub struct QuantizationInfoBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> QuantizationInfoBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_method(&mut self, method: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(QuantizationInfo::VT_METHOD, method);
  }
  #[inline]
  pub fn add_parameters(&mut self, parameters: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(QuantizationInfo::VT_PARAMETERS, parameters);
  }
  #[inline]
  pub fn add_codebooks_block_index(&mut self, codebooks_block_index: u32) {
    self.fbb_.push_slot::<u32>(QuantizationInfo::VT_CODEBOOKS_BLOCK_INDEX, codebooks_block_index, 0);
  }
  #[inline]
  pub fn add_codes_block_index(&mut self, codes_block_index: u32) {
    self.fbb_.push_slot::<u32>(QuantizationInfo::VT_CODES_BLOCK_INDEX, codes_block_index, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> QuantizationInfoBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    QuantizationInfoBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<QuantizationInfo<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, QuantizationInfo::VT_METHOD,"method");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for QuantizationInfo<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("QuantizationInfo");
      ds.field("method", &self.method());
      ds.field("parameters", &self.parameters());
      ds.field("codebooks_block_index", &self.codebooks_block_index());
      ds.field("codes_block_index", &self.codes_block_index());
      ds.finish()
  }
}
