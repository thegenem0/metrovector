// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum VectorSpaceOffset {}
#[derive(Copy, Clone, PartialEq)]

/// A vector space (collection)
pub struct VectorSpace<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for VectorSpace<'a> {
  type Inner = VectorSpace<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> VectorSpace<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_DIMENSION: flatbuffers::VOffsetT = 6;
  pub const VT_TOTAL_VECTORS: flatbuffers::VOffsetT = 8;
  pub const VT_VECTOR_TYPE: flatbuffers::VOffsetT = 10;
  pub const VT_DISTANCE_METRIC: flatbuffers::VOffsetT = 12;
  pub const VT_DATA_TYPE: flatbuffers::VOffsetT = 14;
  pub const VT_VECTORS_BLOCK_INDEX: flatbuffers::VOffsetT = 16;
  pub const VT_INDEX_TYPE_TYPE: flatbuffers::VOffsetT = 18;
  pub const VT_INDEX_TYPE: flatbuffers::VOffsetT = 20;
  pub const VT_VECTOR_IDS_BLOCK_INDEX: flatbuffers::VOffsetT = 22;
  pub const VT_SPARSE_METADATA: flatbuffers::VOffsetT = 24;
  pub const VT_TOMBSTONES: flatbuffers::VOffsetT = 26;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    VectorSpace { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args VectorSpaceArgs<'args>
  ) -> flatbuffers::WIPOffset<VectorSpace<'bldr>> {
    let mut builder = VectorSpaceBuilder::new(_fbb);
    builder.add_total_vectors(args.total_vectors);
    if let Some(x) = args.tombstones { builder.add_tombstones(x); }
    if let Some(x) = args.sparse_metadata { builder.add_sparse_metadata(x); }
    builder.add_vector_ids_block_index(args.vector_ids_block_index);
    if let Some(x) = args.index_type { builder.add_index_type(x); }
    builder.add_vectors_block_index(args.vectors_block_index);
    builder.add_dimension(args.dimension);
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_index_type_type(args.index_type_type);
    builder.add_data_type(args.data_type);
    builder.add_distance_metric(args.distance_metric);
    builder.add_vector_type(args.vector_type);
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(VectorSpace::VT_NAME, None).unwrap()}
  }
  #[inline]
  pub fn dimension(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(VectorSpace::VT_DIMENSION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn total_vectors(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(VectorSpace::VT_TOTAL_VECTORS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn vector_type(&self) -> VectorType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<VectorType>(VectorSpace::VT_VECTOR_TYPE, Some(VectorType::Dense)).unwrap()}
  }
  #[inline]
  pub fn distance_metric(&self) -> DistanceMetric {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<DistanceMetric>(VectorSpace::VT_DISTANCE_METRIC, Some(DistanceMetric::L2)).unwrap()}
  }
  #[inline]
  pub fn data_type(&self) -> DataType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<DataType>(VectorSpace::VT_DATA_TYPE, Some(DataType::Float32)).unwrap()}
  }
  #[inline]
  pub fn vectors_block_index(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(VectorSpace::VT_VECTORS_BLOCK_INDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn index_type_type(&self) -> Index {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Index>(VectorSpace::VT_INDEX_TYPE_TYPE, Some(Index::NONE)).unwrap()}
  }
  #[inline]
  pub fn index_type(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(VectorSpace::VT_INDEX_TYPE, None)}
  }
  #[inline]
  pub fn vector_ids_block_index(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(VectorSpace::VT_VECTOR_IDS_BLOCK_INDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn sparse_metadata(&self) -> Option<SparseMetadata<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<SparseMetadata>>(VectorSpace::VT_SPARSE_METADATA, None)}
  }
  #[inline]
  pub fn tombstones(&self) -> Option<TombstoneInfo<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<TombstoneInfo>>(VectorSpace::VT_TOMBSTONES, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn index_type_as_flat_index(&self) -> Option<FlatIndex<'a>> {
    if self.index_type_type() == Index::FlatIndex {
      self.index_type().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { FlatIndex::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn index_type_as_ivfindex(&self) -> Option<IVFIndex<'a>> {
    if self.index_type_type() == Index::IVFIndex {
      self.index_type().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { IVFIndex::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn index_type_as_hnswindex(&self) -> Option<HNSWIndex<'a>> {
    if self.index_type_type() == Index::HNSWIndex {
      self.index_type().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { HNSWIndex::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn index_type_as_custom_index(&self) -> Option<CustomIndex<'a>> {
    if self.index_type_type() == Index::CustomIndex {
      self.index_type().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { CustomIndex::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for VectorSpace<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, true)?
     .visit_field::<u32>("dimension", Self::VT_DIMENSION, false)?
     .visit_field::<u64>("total_vectors", Self::VT_TOTAL_VECTORS, false)?
     .visit_field::<VectorType>("vector_type", Self::VT_VECTOR_TYPE, false)?
     .visit_field::<DistanceMetric>("distance_metric", Self::VT_DISTANCE_METRIC, false)?
     .visit_field::<DataType>("data_type", Self::VT_DATA_TYPE, false)?
     .visit_field::<u32>("vectors_block_index", Self::VT_VECTORS_BLOCK_INDEX, false)?
     .visit_union::<Index, _>("index_type_type", Self::VT_INDEX_TYPE_TYPE, "index_type", Self::VT_INDEX_TYPE, false, |key, v, pos| {
        match key {
          Index::FlatIndex => v.verify_union_variant::<flatbuffers::ForwardsUOffset<FlatIndex>>("Index::FlatIndex", pos),
          Index::IVFIndex => v.verify_union_variant::<flatbuffers::ForwardsUOffset<IVFIndex>>("Index::IVFIndex", pos),
          Index::HNSWIndex => v.verify_union_variant::<flatbuffers::ForwardsUOffset<HNSWIndex>>("Index::HNSWIndex", pos),
          Index::CustomIndex => v.verify_union_variant::<flatbuffers::ForwardsUOffset<CustomIndex>>("Index::CustomIndex", pos),
          _ => Ok(()),
        }
     })?
     .visit_field::<u32>("vector_ids_block_index", Self::VT_VECTOR_IDS_BLOCK_INDEX, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<SparseMetadata>>("sparse_metadata", Self::VT_SPARSE_METADATA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<TombstoneInfo>>("tombstones", Self::VT_TOMBSTONES, false)?
     .finish();
    Ok(())
  }
}
pub struct VectorSpaceArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dimension: u32,
    pub total_vectors: u64,
    pub vector_type: VectorType,
    pub distance_metric: DistanceMetric,
    pub data_type: DataType,
    pub vectors_block_index: u32,
    pub index_type_type: Index,
    pub index_type: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
    pub vector_ids_block_index: u32,
    pub sparse_metadata: Option<flatbuffers::WIPOffset<SparseMetadata<'a>>>,
    pub tombstones: Option<flatbuffers::WIPOffset<TombstoneInfo<'a>>>,
}
impl<'a> Default for VectorSpaceArgs<'a> {
  #[inline]
  fn default() -> Self {
    VectorSpaceArgs {
      name: None, // required field
      dimension: 0,
      total_vectors: 0,
      vector_type: VectorType::Dense,
      distance_metric: DistanceMetric::L2,
      data_type: DataType::Float32,
      vectors_block_index: 0,
      index_type_type: Index::NONE,
      index_type: None,
      vector_ids_block_index: 0,
      sparse_metadata: None,
      tombstones: None,
    }
  }
}

pub struct VectorSpaceBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> VectorSpaceBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(VectorSpace::VT_NAME, name);
  }
  #[inline]
  pub fn add_dimension(&mut self, dimension: u32) {
    self.fbb_.push_slot::<u32>(VectorSpace::VT_DIMENSION, dimension, 0);
  }
  #[inline]
  pub fn add_total_vectors(&mut self, total_vectors: u64) {
    self.fbb_.push_slot::<u64>(VectorSpace::VT_TOTAL_VECTORS, total_vectors, 0);
  }
  #[inline]
  pub fn add_vector_type(&mut self, vector_type: VectorType) {
    self.fbb_.push_slot::<VectorType>(VectorSpace::VT_VECTOR_TYPE, vector_type, VectorType::Dense);
  }
  #[inline]
  pub fn add_distance_metric(&mut self, distance_metric: DistanceMetric) {
    self.fbb_.push_slot::<DistanceMetric>(VectorSpace::VT_DISTANCE_METRIC, distance_metric, DistanceMetric::L2);
  }
  #[inline]
  pub fn add_data_type(&mut self, data_type: DataType) {
    self.fbb_.push_slot::<DataType>(VectorSpace::VT_DATA_TYPE, data_type, DataType::Float32);
  }
  #[inline]
  pub fn add_vectors_block_index(&mut self, vectors_block_index: u32) {
    self.fbb_.push_slot::<u32>(VectorSpace::VT_VECTORS_BLOCK_INDEX, vectors_block_index, 0);
  }
  #[inline]
  pub fn add_index_type_type(&mut self, index_type_type: Index) {
    self.fbb_.push_slot::<Index>(VectorSpace::VT_INDEX_TYPE_TYPE, index_type_type, Index::NONE);
  }
  #[inline]
  pub fn add_index_type(&mut self, index_type: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(VectorSpace::VT_INDEX_TYPE, index_type);
  }
  #[inline]
  pub fn add_vector_ids_block_index(&mut self, vector_ids_block_index: u32) {
    self.fbb_.push_slot::<u32>(VectorSpace::VT_VECTOR_IDS_BLOCK_INDEX, vector_ids_block_index, 0);
  }
  #[inline]
  pub fn add_sparse_metadata(&mut self, sparse_metadata: flatbuffers::WIPOffset<SparseMetadata<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<SparseMetadata>>(VectorSpace::VT_SPARSE_METADATA, sparse_metadata);
  }
  #[inline]
  pub fn add_tombstones(&mut self, tombstones: flatbuffers::WIPOffset<TombstoneInfo<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<TombstoneInfo>>(VectorSpace::VT_TOMBSTONES, tombstones);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> VectorSpaceBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    VectorSpaceBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<VectorSpace<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, VectorSpace::VT_NAME,"name");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for VectorSpace<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("VectorSpace");
      ds.field("name", &self.name());
      ds.field("dimension", &self.dimension());
      ds.field("total_vectors", &self.total_vectors());
      ds.field("vector_type", &self.vector_type());
      ds.field("distance_metric", &self.distance_metric());
      ds.field("data_type", &self.data_type());
      ds.field("vectors_block_index", &self.vectors_block_index());
      ds.field("index_type_type", &self.index_type_type());
      match self.index_type_type() {
        Index::FlatIndex => {
          if let Some(x) = self.index_type_as_flat_index() {
            ds.field("index_type", &x)
          } else {
            ds.field("index_type", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        Index::IVFIndex => {
          if let Some(x) = self.index_type_as_ivfindex() {
            ds.field("index_type", &x)
          } else {
            ds.field("index_type", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        Index::HNSWIndex => {
          if let Some(x) = self.index_type_as_hnswindex() {
            ds.field("index_type", &x)
          } else {
            ds.field("index_type", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        Index::CustomIndex => {
          if let Some(x) = self.index_type_as_custom_index() {
            ds.field("index_type", &x)
          } else {
            ds.field("index_type", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("index_type", &x)
        },
      };
      ds.field("vector_ids_block_index", &self.vector_ids_block_index());
      ds.field("sparse_metadata", &self.sparse_metadata());
      ds.field("tombstones", &self.tombstones());
      ds.finish()
  }
}
