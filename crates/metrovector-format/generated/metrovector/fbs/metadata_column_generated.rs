// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MetadataColumnOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Basic metadata column
pub struct MetadataColumn<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MetadataColumn<'a> {
  type Inner = MetadataColumn<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MetadataColumn<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_DATA_TYPE: flatbuffers::VOffsetT = 6;
  pub const VT_DATA_BLOCK_INDEX: flatbuffers::VOffsetT = 8;
  pub const VT_NULL_COUNT: flatbuffers::VOffsetT = 10;
  pub const VT_MIN_VALUE: flatbuffers::VOffsetT = 12;
  pub const VT_MAX_VALUE: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MetadataColumn { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MetadataColumnArgs<'args>
  ) -> flatbuffers::WIPOffset<MetadataColumn<'bldr>> {
    let mut builder = MetadataColumnBuilder::new(_fbb);
    builder.add_null_count(args.null_count);
    if let Some(x) = args.max_value { builder.add_max_value(x); }
    if let Some(x) = args.min_value { builder.add_min_value(x); }
    builder.add_data_block_index(args.data_block_index);
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_data_type(args.data_type);
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MetadataColumn::VT_NAME, None).unwrap()}
  }
  #[inline]
  pub fn data_type(&self) -> DataType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<DataType>(MetadataColumn::VT_DATA_TYPE, Some(DataType::Float32)).unwrap()}
  }
  #[inline]
  pub fn data_block_index(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MetadataColumn::VT_DATA_BLOCK_INDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn null_count(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(MetadataColumn::VT_NULL_COUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn min_value(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(MetadataColumn::VT_MIN_VALUE, None)}
  }
  #[inline]
  pub fn max_value(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(MetadataColumn::VT_MAX_VALUE, None)}
  }
}

impl flatbuffers::Verifiable for MetadataColumn<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, true)?
     .visit_field::<DataType>("data_type", Self::VT_DATA_TYPE, false)?
     .visit_field::<u32>("data_block_index", Self::VT_DATA_BLOCK_INDEX, false)?
     .visit_field::<u64>("null_count", Self::VT_NULL_COUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("min_value", Self::VT_MIN_VALUE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("max_value", Self::VT_MAX_VALUE, false)?
     .finish();
    Ok(())
  }
}
pub struct MetadataColumnArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub data_type: DataType,
    pub data_block_index: u32,
    pub null_count: u64,
    pub min_value: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub max_value: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}
impl<'a> Default for MetadataColumnArgs<'a> {
  #[inline]
  fn default() -> Self {
    MetadataColumnArgs {
      name: None, // required field
      data_type: DataType::Float32,
      data_block_index: 0,
      null_count: 0,
      min_value: None,
      max_value: None,
    }
  }
}

pub struct MetadataColumnBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MetadataColumnBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MetadataColumn::VT_NAME, name);
  }
  #[inline]
  pub fn add_data_type(&mut self, data_type: DataType) {
    self.fbb_.push_slot::<DataType>(MetadataColumn::VT_DATA_TYPE, data_type, DataType::Float32);
  }
  #[inline]
  pub fn add_data_block_index(&mut self, data_block_index: u32) {
    self.fbb_.push_slot::<u32>(MetadataColumn::VT_DATA_BLOCK_INDEX, data_block_index, 0);
  }
  #[inline]
  pub fn add_null_count(&mut self, null_count: u64) {
    self.fbb_.push_slot::<u64>(MetadataColumn::VT_NULL_COUNT, null_count, 0);
  }
  #[inline]
  pub fn add_min_value(&mut self, min_value: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MetadataColumn::VT_MIN_VALUE, min_value);
  }
  #[inline]
  pub fn add_max_value(&mut self, max_value: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MetadataColumn::VT_MAX_VALUE, max_value);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MetadataColumnBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MetadataColumnBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MetadataColumn<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, MetadataColumn::VT_NAME,"name");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MetadataColumn<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MetadataColumn");
      ds.field("name", &self.name());
      ds.field("data_type", &self.data_type());
      ds.field("data_block_index", &self.data_block_index());
      ds.field("null_count", &self.null_count());
      ds.field("min_value", &self.min_value());
      ds.field("max_value", &self.max_value());
      ds.finish()
  }
}
