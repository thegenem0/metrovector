// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ExtensionsOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Extension container - only present if advanced features used
pub struct Extensions<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Extensions<'a> {
  type Inner = Extensions<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Extensions<'a> {
  pub const VT_EXTENDED_TYPES: flatbuffers::VOffsetT = 4;
  pub const VT_QUANTIZATION: flatbuffers::VOffsetT = 6;
  pub const VT_COMPLEX_METADATA: flatbuffers::VOffsetT = 8;
  pub const VT_SECURITY: flatbuffers::VOffsetT = 10;
  pub const VT_PERFORMANCE_HINTS: flatbuffers::VOffsetT = 12;
  pub const VT_STATISTICS: flatbuffers::VOffsetT = 14;
  pub const VT_CUSTOM_EXTENSIONS: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Extensions { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ExtensionsArgs<'args>
  ) -> flatbuffers::WIPOffset<Extensions<'bldr>> {
    let mut builder = ExtensionsBuilder::new(_fbb);
    if let Some(x) = args.custom_extensions { builder.add_custom_extensions(x); }
    if let Some(x) = args.statistics { builder.add_statistics(x); }
    if let Some(x) = args.performance_hints { builder.add_performance_hints(x); }
    if let Some(x) = args.security { builder.add_security(x); }
    if let Some(x) = args.complex_metadata { builder.add_complex_metadata(x); }
    if let Some(x) = args.quantization { builder.add_quantization(x); }
    if let Some(x) = args.extended_types { builder.add_extended_types(x); }
    builder.finish()
  }


  #[inline]
  pub fn extended_types(&self) -> Option<ExtendedTypes<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ExtendedTypes>>(Extensions::VT_EXTENDED_TYPES, None)}
  }
  #[inline]
  pub fn quantization(&self) -> Option<QuantizationInfo<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<QuantizationInfo>>(Extensions::VT_QUANTIZATION, None)}
  }
  #[inline]
  pub fn complex_metadata(&self) -> Option<ComplexMetadata<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ComplexMetadata>>(Extensions::VT_COMPLEX_METADATA, None)}
  }
  #[inline]
  pub fn security(&self) -> Option<SecurityInfo<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<SecurityInfo>>(Extensions::VT_SECURITY, None)}
  }
  #[inline]
  pub fn performance_hints(&self) -> Option<PerformanceHints<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<PerformanceHints>>(Extensions::VT_PERFORMANCE_HINTS, None)}
  }
  #[inline]
  pub fn statistics(&self) -> Option<FileStatistics<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<FileStatistics>>(Extensions::VT_STATISTICS, None)}
  }
  #[inline]
  pub fn custom_extensions(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CustomExtension<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CustomExtension>>>>(Extensions::VT_CUSTOM_EXTENSIONS, None)}
  }
}

impl flatbuffers::Verifiable for Extensions<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<ExtendedTypes>>("extended_types", Self::VT_EXTENDED_TYPES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<QuantizationInfo>>("quantization", Self::VT_QUANTIZATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ComplexMetadata>>("complex_metadata", Self::VT_COMPLEX_METADATA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<SecurityInfo>>("security", Self::VT_SECURITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<PerformanceHints>>("performance_hints", Self::VT_PERFORMANCE_HINTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<FileStatistics>>("statistics", Self::VT_STATISTICS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<CustomExtension>>>>("custom_extensions", Self::VT_CUSTOM_EXTENSIONS, false)?
     .finish();
    Ok(())
  }
}
pub struct ExtensionsArgs<'a> {
    pub extended_types: Option<flatbuffers::WIPOffset<ExtendedTypes<'a>>>,
    pub quantization: Option<flatbuffers::WIPOffset<QuantizationInfo<'a>>>,
    pub complex_metadata: Option<flatbuffers::WIPOffset<ComplexMetadata<'a>>>,
    pub security: Option<flatbuffers::WIPOffset<SecurityInfo<'a>>>,
    pub performance_hints: Option<flatbuffers::WIPOffset<PerformanceHints<'a>>>,
    pub statistics: Option<flatbuffers::WIPOffset<FileStatistics<'a>>>,
    pub custom_extensions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CustomExtension<'a>>>>>,
}
impl<'a> Default for ExtensionsArgs<'a> {
  #[inline]
  fn default() -> Self {
    ExtensionsArgs {
      extended_types: None,
      quantization: None,
      complex_metadata: None,
      security: None,
      performance_hints: None,
      statistics: None,
      custom_extensions: None,
    }
  }
}

pub struct ExtensionsBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ExtensionsBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_extended_types(&mut self, extended_types: flatbuffers::WIPOffset<ExtendedTypes<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ExtendedTypes>>(Extensions::VT_EXTENDED_TYPES, extended_types);
  }
  #[inline]
  pub fn add_quantization(&mut self, quantization: flatbuffers::WIPOffset<QuantizationInfo<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<QuantizationInfo>>(Extensions::VT_QUANTIZATION, quantization);
  }
  #[inline]
  pub fn add_complex_metadata(&mut self, complex_metadata: flatbuffers::WIPOffset<ComplexMetadata<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ComplexMetadata>>(Extensions::VT_COMPLEX_METADATA, complex_metadata);
  }
  #[inline]
  pub fn add_security(&mut self, security: flatbuffers::WIPOffset<SecurityInfo<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<SecurityInfo>>(Extensions::VT_SECURITY, security);
  }
  #[inline]
  pub fn add_performance_hints(&mut self, performance_hints: flatbuffers::WIPOffset<PerformanceHints<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<PerformanceHints>>(Extensions::VT_PERFORMANCE_HINTS, performance_hints);
  }
  #[inline]
  pub fn add_statistics(&mut self, statistics: flatbuffers::WIPOffset<FileStatistics<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<FileStatistics>>(Extensions::VT_STATISTICS, statistics);
  }
  #[inline]
  pub fn add_custom_extensions(&mut self, custom_extensions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<CustomExtension<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Extensions::VT_CUSTOM_EXTENSIONS, custom_extensions);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ExtensionsBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ExtensionsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Extensions<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Extensions<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Extensions");
      ds.field("extended_types", &self.extended_types());
      ds.field("quantization", &self.quantization());
      ds.field("complex_metadata", &self.complex_metadata());
      ds.field("security", &self.security());
      ds.field("performance_hints", &self.performance_hints());
      ds.field("statistics", &self.statistics());
      ds.field("custom_extensions", &self.custom_extensions());
      ds.finish()
  }
}
