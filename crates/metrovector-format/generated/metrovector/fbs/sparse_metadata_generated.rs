// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum SparseMetadataOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Sparse vector metadata
pub struct SparseMetadata<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SparseMetadata<'a> {
  type Inner = SparseMetadata<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SparseMetadata<'a> {
  pub const VT_INDICES_BLOCK_INDEX: flatbuffers::VOffsetT = 4;
  pub const VT_VALUES_BLOCK_INDEX: flatbuffers::VOffsetT = 6;
  pub const VT_MAX_NNZ: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SparseMetadata { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SparseMetadataArgs
  ) -> flatbuffers::WIPOffset<SparseMetadata<'bldr>> {
    let mut builder = SparseMetadataBuilder::new(_fbb);
    builder.add_max_nnz(args.max_nnz);
    builder.add_values_block_index(args.values_block_index);
    builder.add_indices_block_index(args.indices_block_index);
    builder.finish()
  }


  #[inline]
  pub fn indices_block_index(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(SparseMetadata::VT_INDICES_BLOCK_INDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn values_block_index(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(SparseMetadata::VT_VALUES_BLOCK_INDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn max_nnz(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(SparseMetadata::VT_MAX_NNZ, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for SparseMetadata<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("indices_block_index", Self::VT_INDICES_BLOCK_INDEX, false)?
     .visit_field::<u32>("values_block_index", Self::VT_VALUES_BLOCK_INDEX, false)?
     .visit_field::<u32>("max_nnz", Self::VT_MAX_NNZ, false)?
     .finish();
    Ok(())
  }
}
pub struct SparseMetadataArgs {
    pub indices_block_index: u32,
    pub values_block_index: u32,
    pub max_nnz: u32,
}
impl<'a> Default for SparseMetadataArgs {
  #[inline]
  fn default() -> Self {
    SparseMetadataArgs {
      indices_block_index: 0,
      values_block_index: 0,
      max_nnz: 0,
    }
  }
}

pub struct SparseMetadataBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SparseMetadataBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_indices_block_index(&mut self, indices_block_index: u32) {
    self.fbb_.push_slot::<u32>(SparseMetadata::VT_INDICES_BLOCK_INDEX, indices_block_index, 0);
  }
  #[inline]
  pub fn add_values_block_index(&mut self, values_block_index: u32) {
    self.fbb_.push_slot::<u32>(SparseMetadata::VT_VALUES_BLOCK_INDEX, values_block_index, 0);
  }
  #[inline]
  pub fn add_max_nnz(&mut self, max_nnz: u32) {
    self.fbb_.push_slot::<u32>(SparseMetadata::VT_MAX_NNZ, max_nnz, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SparseMetadataBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SparseMetadataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SparseMetadata<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SparseMetadata<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SparseMetadata");
      ds.field("indices_block_index", &self.indices_block_index());
      ds.field("values_block_index", &self.values_block_index());
      ds.field("max_nnz", &self.max_nnz());
      ds.finish()
  }
}
