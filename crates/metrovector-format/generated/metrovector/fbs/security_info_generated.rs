// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum SecurityInfoOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Security and encryption
pub struct SecurityInfo<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SecurityInfo<'a> {
  type Inner = SecurityInfo<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SecurityInfo<'a> {
  pub const VT_ENCRYPTION_ALGORITHM: flatbuffers::VOffsetT = 4;
  pub const VT_ENCRYPTED_BLOCKS: flatbuffers::VOffsetT = 6;
  pub const VT_KEY_DERIVATION: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SecurityInfo { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SecurityInfoArgs<'args>
  ) -> flatbuffers::WIPOffset<SecurityInfo<'bldr>> {
    let mut builder = SecurityInfoBuilder::new(_fbb);
    if let Some(x) = args.key_derivation { builder.add_key_derivation(x); }
    if let Some(x) = args.encrypted_blocks { builder.add_encrypted_blocks(x); }
    if let Some(x) = args.encryption_algorithm { builder.add_encryption_algorithm(x); }
    builder.finish()
  }


  #[inline]
  pub fn encryption_algorithm(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SecurityInfo::VT_ENCRYPTION_ALGORITHM, None)}
  }
  #[inline]
  pub fn encrypted_blocks(&self) -> Option<flatbuffers::Vector<'a, u32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(SecurityInfo::VT_ENCRYPTED_BLOCKS, None)}
  }
  #[inline]
  pub fn key_derivation(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(SecurityInfo::VT_KEY_DERIVATION, None)}
  }
}

impl flatbuffers::Verifiable for SecurityInfo<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("encryption_algorithm", Self::VT_ENCRYPTION_ALGORITHM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>("encrypted_blocks", Self::VT_ENCRYPTED_BLOCKS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("key_derivation", Self::VT_KEY_DERIVATION, false)?
     .finish();
    Ok(())
  }
}
pub struct SecurityInfoArgs<'a> {
    pub encryption_algorithm: Option<flatbuffers::WIPOffset<&'a str>>,
    pub encrypted_blocks: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub key_derivation: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}
impl<'a> Default for SecurityInfoArgs<'a> {
  #[inline]
  fn default() -> Self {
    SecurityInfoArgs {
      encryption_algorithm: None,
      encrypted_blocks: None,
      key_derivation: None,
    }
  }
}

pub struct SecurityInfoBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SecurityInfoBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_encryption_algorithm(&mut self, encryption_algorithm: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SecurityInfo::VT_ENCRYPTION_ALGORITHM, encryption_algorithm);
  }
  #[inline]
  pub fn add_encrypted_blocks(&mut self, encrypted_blocks: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SecurityInfo::VT_ENCRYPTED_BLOCKS, encrypted_blocks);
  }
  #[inline]
  pub fn add_key_derivation(&mut self, key_derivation: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SecurityInfo::VT_KEY_DERIVATION, key_derivation);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SecurityInfoBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SecurityInfoBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SecurityInfo<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SecurityInfo<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SecurityInfo");
      ds.field("encryption_algorithm", &self.encryption_algorithm());
      ds.field("encrypted_blocks", &self.encrypted_blocks());
      ds.field("key_derivation", &self.key_derivation());
      ds.finish()
  }
}
