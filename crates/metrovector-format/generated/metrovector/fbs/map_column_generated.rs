// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MapColumnOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MapColumn<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MapColumn<'a> {
  type Inner = MapColumn<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MapColumn<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_KEY_TYPE: flatbuffers::VOffsetT = 6;
  pub const VT_VALUE_TYPE: flatbuffers::VOffsetT = 8;
  pub const VT_KEYS_BLOCK_INDEX: flatbuffers::VOffsetT = 10;
  pub const VT_VALUES_BLOCK_INDEX: flatbuffers::VOffsetT = 12;
  pub const VT_OFFSETS_BLOCK_INDEX: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MapColumn { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MapColumnArgs<'args>
  ) -> flatbuffers::WIPOffset<MapColumn<'bldr>> {
    let mut builder = MapColumnBuilder::new(_fbb);
    builder.add_offsets_block_index(args.offsets_block_index);
    builder.add_values_block_index(args.values_block_index);
    builder.add_keys_block_index(args.keys_block_index);
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_value_type(args.value_type);
    builder.add_key_type(args.key_type);
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MapColumn::VT_NAME, None).unwrap()}
  }
  #[inline]
  pub fn key_type(&self) -> DataType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<DataType>(MapColumn::VT_KEY_TYPE, Some(DataType::Float32)).unwrap()}
  }
  #[inline]
  pub fn value_type(&self) -> DataType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<DataType>(MapColumn::VT_VALUE_TYPE, Some(DataType::Float32)).unwrap()}
  }
  #[inline]
  pub fn keys_block_index(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MapColumn::VT_KEYS_BLOCK_INDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn values_block_index(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MapColumn::VT_VALUES_BLOCK_INDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn offsets_block_index(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MapColumn::VT_OFFSETS_BLOCK_INDEX, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MapColumn<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, true)?
     .visit_field::<DataType>("key_type", Self::VT_KEY_TYPE, false)?
     .visit_field::<DataType>("value_type", Self::VT_VALUE_TYPE, false)?
     .visit_field::<u32>("keys_block_index", Self::VT_KEYS_BLOCK_INDEX, false)?
     .visit_field::<u32>("values_block_index", Self::VT_VALUES_BLOCK_INDEX, false)?
     .visit_field::<u32>("offsets_block_index", Self::VT_OFFSETS_BLOCK_INDEX, false)?
     .finish();
    Ok(())
  }
}
pub struct MapColumnArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub key_type: DataType,
    pub value_type: DataType,
    pub keys_block_index: u32,
    pub values_block_index: u32,
    pub offsets_block_index: u32,
}
impl<'a> Default for MapColumnArgs<'a> {
  #[inline]
  fn default() -> Self {
    MapColumnArgs {
      name: None, // required field
      key_type: DataType::Float32,
      value_type: DataType::Float32,
      keys_block_index: 0,
      values_block_index: 0,
      offsets_block_index: 0,
    }
  }
}

pub struct MapColumnBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MapColumnBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MapColumn::VT_NAME, name);
  }
  #[inline]
  pub fn add_key_type(&mut self, key_type: DataType) {
    self.fbb_.push_slot::<DataType>(MapColumn::VT_KEY_TYPE, key_type, DataType::Float32);
  }
  #[inline]
  pub fn add_value_type(&mut self, value_type: DataType) {
    self.fbb_.push_slot::<DataType>(MapColumn::VT_VALUE_TYPE, value_type, DataType::Float32);
  }
  #[inline]
  pub fn add_keys_block_index(&mut self, keys_block_index: u32) {
    self.fbb_.push_slot::<u32>(MapColumn::VT_KEYS_BLOCK_INDEX, keys_block_index, 0);
  }
  #[inline]
  pub fn add_values_block_index(&mut self, values_block_index: u32) {
    self.fbb_.push_slot::<u32>(MapColumn::VT_VALUES_BLOCK_INDEX, values_block_index, 0);
  }
  #[inline]
  pub fn add_offsets_block_index(&mut self, offsets_block_index: u32) {
    self.fbb_.push_slot::<u32>(MapColumn::VT_OFFSETS_BLOCK_INDEX, offsets_block_index, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MapColumnBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MapColumnBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MapColumn<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, MapColumn::VT_NAME,"name");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MapColumn<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MapColumn");
      ds.field("name", &self.name());
      ds.field("key_type", &self.key_type());
      ds.field("value_type", &self.value_type());
      ds.field("keys_block_index", &self.keys_block_index());
      ds.field("values_block_index", &self.values_block_index());
      ds.field("offsets_block_index", &self.offsets_block_index());
      ds.finish()
  }
}
