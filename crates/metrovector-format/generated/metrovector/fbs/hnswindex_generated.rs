// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum HNSWIndexOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Hierarchical NSW graph
pub struct HNSWIndex<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HNSWIndex<'a> {
  type Inner = HNSWIndex<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> HNSWIndex<'a> {
  pub const VT_ENTRY_POINT: flatbuffers::VOffsetT = 4;
  pub const VT_MAX_CONNECTIONS: flatbuffers::VOffsetT = 6;
  pub const VT_GRAPH_BLOCK_INDEX: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    HNSWIndex { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args HNSWIndexArgs
  ) -> flatbuffers::WIPOffset<HNSWIndex<'bldr>> {
    let mut builder = HNSWIndexBuilder::new(_fbb);
    builder.add_entry_point(args.entry_point);
    builder.add_graph_block_index(args.graph_block_index);
    builder.add_max_connections(args.max_connections);
    builder.finish()
  }


  #[inline]
  pub fn entry_point(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(HNSWIndex::VT_ENTRY_POINT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn max_connections(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(HNSWIndex::VT_MAX_CONNECTIONS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn graph_block_index(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(HNSWIndex::VT_GRAPH_BLOCK_INDEX, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for HNSWIndex<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("entry_point", Self::VT_ENTRY_POINT, false)?
     .visit_field::<u32>("max_connections", Self::VT_MAX_CONNECTIONS, false)?
     .visit_field::<u32>("graph_block_index", Self::VT_GRAPH_BLOCK_INDEX, false)?
     .finish();
    Ok(())
  }
}
pub struct HNSWIndexArgs {
    pub entry_point: u64,
    pub max_connections: u32,
    pub graph_block_index: u32,
}
impl<'a> Default for HNSWIndexArgs {
  #[inline]
  fn default() -> Self {
    HNSWIndexArgs {
      entry_point: 0,
      max_connections: 0,
      graph_block_index: 0,
    }
  }
}

pub struct HNSWIndexBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> HNSWIndexBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_entry_point(&mut self, entry_point: u64) {
    self.fbb_.push_slot::<u64>(HNSWIndex::VT_ENTRY_POINT, entry_point, 0);
  }
  #[inline]
  pub fn add_max_connections(&mut self, max_connections: u32) {
    self.fbb_.push_slot::<u32>(HNSWIndex::VT_MAX_CONNECTIONS, max_connections, 0);
  }
  #[inline]
  pub fn add_graph_block_index(&mut self, graph_block_index: u32) {
    self.fbb_.push_slot::<u32>(HNSWIndex::VT_GRAPH_BLOCK_INDEX, graph_block_index, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> HNSWIndexBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    HNSWIndexBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HNSWIndex<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for HNSWIndex<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("HNSWIndex");
      ds.field("entry_point", &self.entry_point());
      ds.field("max_connections", &self.max_connections());
      ds.field("graph_block_index", &self.graph_block_index());
      ds.finish()
  }
}
