// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ArrayColumnOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ArrayColumn<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ArrayColumn<'a> {
  type Inner = ArrayColumn<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ArrayColumn<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_ELEMENT_TYPE: flatbuffers::VOffsetT = 6;
  pub const VT_DATA_BLOCK_INDEX: flatbuffers::VOffsetT = 8;
  pub const VT_OFFSETS_BLOCK_INDEX: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ArrayColumn { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ArrayColumnArgs<'args>
  ) -> flatbuffers::WIPOffset<ArrayColumn<'bldr>> {
    let mut builder = ArrayColumnBuilder::new(_fbb);
    builder.add_offsets_block_index(args.offsets_block_index);
    builder.add_data_block_index(args.data_block_index);
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_element_type(args.element_type);
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ArrayColumn::VT_NAME, None).unwrap()}
  }
  #[inline]
  pub fn element_type(&self) -> DataType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<DataType>(ArrayColumn::VT_ELEMENT_TYPE, Some(DataType::Float32)).unwrap()}
  }
  #[inline]
  pub fn data_block_index(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ArrayColumn::VT_DATA_BLOCK_INDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn offsets_block_index(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ArrayColumn::VT_OFFSETS_BLOCK_INDEX, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ArrayColumn<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, true)?
     .visit_field::<DataType>("element_type", Self::VT_ELEMENT_TYPE, false)?
     .visit_field::<u32>("data_block_index", Self::VT_DATA_BLOCK_INDEX, false)?
     .visit_field::<u32>("offsets_block_index", Self::VT_OFFSETS_BLOCK_INDEX, false)?
     .finish();
    Ok(())
  }
}
pub struct ArrayColumnArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub element_type: DataType,
    pub data_block_index: u32,
    pub offsets_block_index: u32,
}
impl<'a> Default for ArrayColumnArgs<'a> {
  #[inline]
  fn default() -> Self {
    ArrayColumnArgs {
      name: None, // required field
      element_type: DataType::Float32,
      data_block_index: 0,
      offsets_block_index: 0,
    }
  }
}

pub struct ArrayColumnBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ArrayColumnBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ArrayColumn::VT_NAME, name);
  }
  #[inline]
  pub fn add_element_type(&mut self, element_type: DataType) {
    self.fbb_.push_slot::<DataType>(ArrayColumn::VT_ELEMENT_TYPE, element_type, DataType::Float32);
  }
  #[inline]
  pub fn add_data_block_index(&mut self, data_block_index: u32) {
    self.fbb_.push_slot::<u32>(ArrayColumn::VT_DATA_BLOCK_INDEX, data_block_index, 0);
  }
  #[inline]
  pub fn add_offsets_block_index(&mut self, offsets_block_index: u32) {
    self.fbb_.push_slot::<u32>(ArrayColumn::VT_OFFSETS_BLOCK_INDEX, offsets_block_index, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ArrayColumnBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ArrayColumnBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ArrayColumn<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, ArrayColumn::VT_NAME,"name");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ArrayColumn<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ArrayColumn");
      ds.field("name", &self.name());
      ds.field("element_type", &self.element_type());
      ds.field("data_block_index", &self.data_block_index());
      ds.field("offsets_block_index", &self.offsets_block_index());
      ds.finish()
  }
}
